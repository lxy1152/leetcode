package main

// 665. 非递减数列
//给你一个长度为n的整数数组，请你判断在 最多 改变1 个元素的情况下，该数组能否变成一个非递减数列。
//
//我们是这样定义一个非递减数列的：对于数组中所有的i (0 <= i <= n-2)，总满足 nums[i] <= nums[i + 1]。
//

// 对于这类题目，我们可以先修改数组，并且观察在对应修改之后，满足条件还能否继续遍历 得到正确的结果，

// 分析非单调递增可能出现的场景。
//
//	1: 4,2,5
//	2:1,4,2,5
//	3:3,4,2,5
//	针对第一种情况我们可以减小4或者增大2 第二种情况因为限定是1，所以我们可以做的动作和第一种情况一样，减小4或者增大2
//
// 针对第三种情况  限定的位置变为了3，这时候我们只有一种选择就是增大2
//
//	然后针对三种情况进行考虑
//	因为在每一次处理之后 ，目标数字之前的的队列都是单调递增的 ， 状态被记录了下来，
//
// 有点想复杂了，其实场景可以遍历的，
func checkPossibility(nums []int) bool {
	count := 0
	leng := len(nums)
	if leng <= 2 {
		return true
	}

	for i := 1; i < leng; i++ {

		if nums[i] < nums[i-1] {
			count++
			if i == 1 || nums[i] >= nums[i-2] {
				nums[i-1] = nums[i]
			} else {
				nums[i] = nums[i-1]
			}

		}

	}
	return count <= 1

}

func main() {
	print(checkPossibility([]int{3, 4, 2, 3}))
}
